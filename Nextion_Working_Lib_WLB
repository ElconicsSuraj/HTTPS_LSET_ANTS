#include <Arduino.h>
#include "HX711.h"
#include <freertos/task.h>
#include <Nextion.h>

// HX711 load cell
HX711 scale;

// Nextion display
NexText t0 = NexText(1, 2, "t0");
NexText t1 = NexText(1, 3, "t1");
NexText t2 = NexText(1, 4, "t2");
NexButton b0 = NexButton(1, 6, "b0"); // Tare button on page 1 with id 5

// Initialize LED pin for example purposes
const int ledPin = 2;
const int LOADCELL_DOUT_PIN = 16;
const int LOADCELL_SCK_PIN = 4;
const int BUTTON_PIN = 18;
const unsigned long DEBOUNCE_DELAY = 50;

volatile bool buttonPressed = false;
unsigned long lastDebounceTime = 0;

void Task1(void *pvParameters);
void Task2(void *pvParameters);

TaskHandle_t Task1Handle = NULL;
TaskHandle_t Task2Handle = NULL;

SemaphoreHandle_t lcdSemaphore;

// Tare button callback function
void b0PopCallback(void *ptr) {
  Serial.println("Tare button pressed");
  tare();
}

void b0PushCallback(void *ptr) {
  Serial.println("Tare button pressed");
  tare();
}

void setup() {
  Serial.begin(9600);
  Serial2.begin(9600, SERIAL_8N1, 5, 17);  // RX pin 16, TX pin 17
  Serial.println("Serial2 initialized");

  // Initialize Nextion display
  nexInit();

  // Attach tare button callback
  b0.attachPop(b0PopCallback);

  lcdSemaphore = xSemaphoreCreateMutex();

  xTaskCreatePinnedToCore(
    Task1,
    "Task1",
    5000,
    NULL,
    1,
    &Task1Handle,
    0 // Run on core 0
  );

  xTaskCreatePinnedToCore(
    Task2,
    "Task2",
    5000,
    NULL,
    2,
    &Task2Handle,
    1 // Run on core 1
  );
}

void loop() {
  // Empty, because we are using FreeRTOS tasks
}

void Task1(void *pvParameters) {
  (void) pvParameters;

  // Initialize the scale
  Serial.println("Initializing the scale");
  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
  scale.set_scale(1990);
  scale.tare();

  pinMode(BUTTON_PIN, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(BUTTON_PIN), buttonISR, FALLING);

  while (1) {
    Serial.println("Task 1 is running");
       // Attach tare button callback
  b0.attachPop(b0PopCallback);
    b0.attachPush(b0PushCallback);
    if (buttonPressed) {
      tare();
      buttonPressed = false;
    }

    scale.power_down();
    delay(500);
    scale.power_up();

    double weight = scale.get_units(10); // Get weight in double floating point
    Serial.print("Weight:\t");
    Serial.println(weight, 0); // Print weight with 2 decimal places
   
    if (xSemaphoreTake(lcdSemaphore, portMAX_DELAY)) {
      if (weight < 3.0) {
        weight = 0;
      }

      t2.setText(String(weight, 0).c_str());

      xSemaphoreGive(lcdSemaphore);
    }

    vTaskDelay(1000 / portTICK_PERIOD_MS);
  }
}

void Task2(void *pvParameters) {
  (void) pvParameters;

  pinMode(2, OUTPUT); // Set pin 2 as an output
  
  Serial.println("Task 2 is created"); // Debugging statement to check if Task 2 is created

  while (1) {
    // Use ulTaskNotifyTake to wait until Task2 is notified to run
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);

    Serial.println("Task 2 is running"); // Debugging statement to check if Task 2 is running
    
    if (Serial.available()) {
      Serial.println("Serial data available"); // Debugging statement to check if serial data is available

      // Set pin 2 high
      digitalWrite(2, HIGH);

      String newData = ""; // Track the new data received from serial
      
      while (Serial.available()) {
        char incomingChar = Serial.read();
        newData += incomingChar;
        delay(10);  // Give some time for all characters to arrive
      }

      Serial.println("Received: " + newData); // Debugging print

      // Ensure newData fits within the display line limit
      if (newData.length() > 20) {
        newData = newData.substring(0, 20);
      }

      // Parse the received data
      int length = 0;
      int breadth = 0;
      
      // Find the positions of "L" and "B" keywords
      int lengthStart = newData.indexOf('L') + 2;
      int lengthEnd = newData.indexOf('B') - 1;
      int breadthStart = newData.indexOf('B') + 2;

      if (lengthStart > 1 && lengthEnd > lengthStart && breadthStart > lengthEnd) {
        // Extract substrings for length and breadth
        String lengthStr = newData.substring(lengthStart, lengthEnd);
        String breadthStr = newData.substring(breadthStart);

        // Convert the substrings to integers
        length = lengthStr.toInt();
        breadth = breadthStr.toInt();
      }

      // Print the results
      Serial.print("Length: ");
      Serial.println(length);
      Serial.print("Breadth: ");
      Serial.println(breadth);

      if (xSemaphoreTake(lcdSemaphore, portMAX_DELAY)) {
        t0.setText(String(length).c_str());
        t1.setText(String(breadth).c_str());
       
        xSemaphoreGive(lcdSemaphore);
      }

      // Set pin 2 low after processing data
      digitalWrite(2, LOW);
    }
  }
}

void tare() {
  if (xSemaphoreTake(lcdSemaphore, portMAX_DELAY)) {
    scale.tare();
    t2.setText("Tare");
    delay(1000);
    xSemaphoreGive(lcdSemaphore);
  }
}

void buttonISR() {
  unsigned long currentMillis = millis();
  if (currentMillis - lastDebounceTime >= DEBOUNCE_DELAY) {
    buttonPressed = true;
  }
  lastDebounceTime = currentMillis;
}

// ISR to notify Task2 when serial data is available
void serialEvent() {
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  vTaskNotifyGiveFromISR(Task2Handle, &xHigherPriorityTaskWoken);
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}
